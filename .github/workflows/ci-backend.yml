# .github/workflows/ci-backend.yml

name: CI - Django Backend

# 워크플로우 실행 조건 정의
on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행
    paths:
      - "backend/**" # backend/ 디렉토리 하위에 변경이 있을 때만 실행
      - ".github/workflows/ci-backend.yml" # 워크플로우 파일 자체가 변경될 때도 실행

jobs:
  # 첫 번째 Job: Docker 이미지를 빌드하고 푸시하는 작업
  build-and-push-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest # 실행 환경 지정

    # 이 Job의 결과물(output)을 다른 Job에서 사용할 수 있도록 설정
    outputs:
      image_tag: ${{ steps.meta.outputs.tag }} # 생성된 이미지 태그를 output으로 지정

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2. Docker Hub 로그인 (GitHub Secrets 사용)
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 3. 이미지 태그 생성 (날짜 + Git 커밋 해시 조합)
      - name: Generate image tag
        id: meta
        run: |
          TAG=$(date +%Y%m%d)-$(git rev-parse --short HEAD)
          echo "tag=${TAG}" >> $GITHUB_OUTPUT

      # 4. Docker 이미지 빌드 및 푸시
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./backend # Dockerfile이 있는 디렉토리
          push: true # 빌드 후 푸시 실행
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/py-webapp-backend:${{ steps.meta.outputs.tag }}

  update-infra-repo:
    name: Update Infra Repository with New Image Tag
    runs-on: ubuntu-latest
    needs: build-and-push-image # build-and-push-image Job이 성공해야 실행됨

    steps:
      # 1. infra 리포지토리의 dev 브랜치를 체크아웃합니다.
      - name: Checkout infra repository
        uses: actions/checkout@v4
        with:
          repository: ggorockee/infra.git # 대상 리포지토리
          ref: dev # 대상 브랜치
          token: ${{ secrets.INFRA_GITHUB_TOKEN }} # infra 리포지토리에 접근하기 위한 PAT

      # 2. yq 설치 (YAML 파일을 안전하게 수정하기 위한 도구)
      - name: Install yq
        run: |
          sudo wget https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64 -O /usr/bin/yq
          sudo chmod +x /usr/bin/yq

      # 3. values.yaml 파일의 이미지 태그를 수정합니다.
      - name: Update values.yaml
        run: |
          # 이전 Job에서 전달받은 이미지 태그를 변수로 사용
          TAG=${{ needs.build-and-push-image.outputs.image_tag }}
          FILE_PATH="charts/argocd/applicationsets/valuefiles/prod/camping-umbrella/values.yaml"

          # yq를 사용하여 backend.image.tag 값을 새로운 태그로 변경
          yq eval '.backend.image.tag = "'$TAG'"' -i $FILE_PATH

      # 4. 변경 사항을 커밋하고 푸시합니다.
      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .

          # 변경 사항이 있을 경우에만 커밋 및 푸시 실행
          if ! git diff --staged --quiet; then
            git commit -m "Update backend image tag to ${{ needs.build-and-push-image.outputs.image_tag }}"
            git push
          else
            echo "No changes to commit."
          fi
